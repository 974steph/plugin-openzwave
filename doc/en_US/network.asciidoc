== Z-Wave networks

image:../images/network01.png[]

You will find here general information on your Z-Wave network.

image:../images/network02.png[]

=== Summary

The first tab show a basic summary of your Z-Wave network, in particular the state of the network as well as the number of elements in the wait queue.

*Information*

* Shows general information on the network, its startup timestamp, the time  it took for it to be up and running.
* The total number of nodes as well as the number of the currently sleeping ones.
* The interval of queries associated with manual refresh. It is predefined to 5 minutes in the Z-Wave engine.
* The neighbors of the controller.

*State*

image:../images/network03.png[]

Information on the current state of the network :

* Current state, can be : *Driver initialized*, *Topology loaded* or "Ready*.
* Out queue, indicates the number of outbound messages in queue waiting to be sent.
This value is usually high while the network is starting when in "Driver initialized state".

Once the network has at least reached the *Topology loaded* state, internal Z-Wave server mechanisms will force values update ; it is then normal to observe the number of messages increasing. It will then rapidly decrease to 0.

[TIP]
The network is operational when it reaches the state "Topology loaded*, that is when all the nodes have completed their interview. According to the number of modules, their ratio between battery- and mains-powered, the choice of the Z-Wave dongle and the system on which the systems runs, this can take between one and five minutes. 

A *ReadY* network means that all the modules, battery- or mains-powered, have completed their interview.

[TIP]
According to the modules in the network, it is possible the network will never reach by itself the *Ready* status. Remote controls for instance will not wake-up by themselves and therefore not complete their interview. Even in this case the network is fully operational, and although remote controls did not complete their interview they are functioning.

*Capabilities*

Allows to know if the controller is a primary or secondary controller.

*System*

Displays miscellaneous system information.

* Information of the used USB port.
* OpenZWave library version
* Python-OpenZWave library version


=== Actions

image:../images/network05.png[]

You will find here all possible actions on the whole of the Z-wave network. Each action is complemented by a brief description.

[IMPORTANT]
Some actions are really dangerous and / or can not be unapplied ; the Jeedom team will not be held responsible for any wrongdoing.

[IMPORTANT]
Some modules require a inclusion in secured mode, for instance door locks. Secured inclusion has to be initiated from this screen.

[TIP]
If an action can not be launched, it will be deactivated until it is again available.

=== Statistics

image:../images/network06.png[]

You will find here general statistics on the whole of the Z-Wave network.

=== Graph of the network 

image:../images/network07.png[]

This tabs shows a graphical representation of the links between the nodes. 

Color codes :

* *Black* : The primary controller, in general shown as Jeedom.
* *Green* : Direct communication with the controller, ideal situation.
* *Blue* : controllers, such as remote controls, that are associated with the primary controller but have no neighbors.
* *Yellow* : All routes have more than one hop to reach the controller.
* *Grey* : The interview has not yet completed ; links will be only determined when the interviews are complete.
* *Red* : presumed dead, or without neighbors ; no longer participates in the network mesh.

[TIP]
Seul les équipements actifs seront affichés dans le graphique réseau.

Le réseau Z-Wave est constitué de trois différents types de nœuds avec trois fonctions principales.

La principale différence entre les trois types de nœuds est leur connaissance de la table de routage du réseau et par la suite leur capacité à envoyer des messages au réseau:


=== Table de routage

Chaque nœud est en mesure de déterminer quels autres nœuds sont en communication directe.
Ces nœuds sont appelés voisins.
Au cours de l'inclusion et/ou plus tard sur demande, le nœud est en mesure d'informer le contrôleur de la liste de voisins.
Grâce à ces informations, le contrôleur est capable de construire une table qui a toutes les informations sur les routes possibles de communication dans un réseau.

image:../images/network08.png[]

Les lignes du tableau contiennent les nœuds de source et les colonnes contiennent les nœuds de destination.
Se référer à la légende pour comprendre les couleurs de cellule qui indiquent les liens entre deux nœuds.

Color codes :

* *Green* : Direct communication with the controller, ideal situation.
* *Blue* : Au moins 2 routes avec un saut.
* *Jaune* : Moins de 2 routes avec un saut.
* *Gris* : L'interview n'est pas encore complété, sera réellement mis à jour une fois l'interview complété.
* *Orange* : Toutes les routes ont plus d'un saut. Peut engendrer des latences.

[TIP]
Seul les équipements actifs seront affichés dans le graphique réseau.

[IMPORTANT]
Un module présumé mort, ne participe pas/plus au maillage du réseau. Il sera marqué ici d'un point d'exclamation rouge dans un triangle.

[TIP]
Vous pouvez lancer manuellement la mise à jour des voisins, par module ou pour l'ensemble du réseau à l'aide des boutons disponibles dans la table de routage.