== Fixing and diagnostic

=== My module is not detected or does not communicate its product identifiers and type 
image:../images/troubleshooting01.png[]

Request the regeneration of the node from the Actions tab of the module.

If you have several modules in this situation, request the "Regeneration of unknown nodes" from the Actions tab of the "Z-Wave network" screen.

=== My module is presumed Dead by the controller
image:../images/troubleshooting02.png[]

If the module is still powered and joinable, follow the proposed solutions in the module's screen.

If a module was decommissioned or is really faulty, you can excluded it from the network using "Delete the faulty node" from the *Actions* tab.

If a module was removed and sent to get repaired and a new one was received, you can request *Replace a faulty node* from the *Actions* tab ; the controller goes in inclusion mode and you can proceed with the new module's inclusion. 
The id of the device will remain the same, as well as its commands.


=== How to use the SwitchAll command
image:../images/troubleshooting03.png[]

It is available on your controller node.
Your controller should have the commands Switch All On and Switch All Off.

If the controller does not appear in the list of the nodes, launch a synchronization.

image:../images/troubleshooting04.png[]

The Switch All command class is generally supported on switches and dimmers. Its behavior can be configured on each module that supports it.

One can either :

** Deactivate the Switch All command class.
** Activate it for the On and the Off.
** Activate On only.
** Activate Off only.

The choice of options depends on the manufacturer.

You have to carefully study all switches and dimmers before setting up a scenario, if these modules are not only used for lights.


=== My module has no Scene or Button command
image:../images/troubleshooting05.png[]

You can add the command in the command "mapping" screen.

It is an *Info* command CC *0x2b* Instance *0* command *data{0}.val*

The Scene mode has to be activated in the parameters of the module. Refer to the documentation of the module for details.


=== Force refresh of the values

It is possible to request the refresh of the values of an instance for a specific command class. 

One can do it using an http request or by creating a command on the command mapping screen of a device.

image:../images/troubleshooting06.png[]

Create an *Action* command, select the wanted CC for a given *instance* with a command *data[0].ForceRefresh()*

The whole set of indexes of the instance for this command will be updated. The battery-powered nodes will refresh their values at their next wake-up.

You can also request it by script with an http request to the Z-Wave REST server.

Replace ip_jeedom, node_id, instance_id, cc_id and index in

\http://token:#APIKEY#@ip_jeedom:8083/ZWaveAPI/Run/devices[node_id].instances[instance_id].commandClasses[cc_id].data[index].ForceRefresh()

The access to the REST API having changed, refer to link:./restapi.asciidoc[içi].

=== Transfer the modules on a new controller
You might for several reasons need to transfer all your modules on a new primary controller.

For instance, you decide to replace a *raZberry* by a *Z-Stick Gen5*, or you need to reset the primary controller.

Here are the steps to follow so as to not lose your scenarios, widgets and values histories :

** 1) Backup Jeedom
** 2) Note (print screen) your parameters values for each module, as they will be lost after exclusion.
** 3) In the Z-Wave configuration unset the option "Automatically delete excluded devices" and save. The network restart.
** 4a) In the case of a *Reset*, reset the primary controller and restart the plugin.
** 4b) for a new controller, stop Jeedom, unplug the current controller and plug the new one in. Start the network.
** 5) for each Z-Wave device, set its Z-Wave ID to *0*.
** 6) Open 2 pages of the Z-Wave plugin in 2 different pages.
** 7) (from the first screen) fo on the configuration screen of a module to be included in the new controller.
** 8) (from the second screen) exclude then include the module. A new device will be created.
** 9) copy the Z-Wave ID of the new device, then delete it.
** 10) on the first screen set the Z-wave ID to the one that was copied.
** 11) The Z-Wave parameters are lost during exclusion/inclusion, so reset them to your specific values.
** 11) repeat steps 7 to 11 for each module to transfer.
** 12) when done you should have no devices left with Z-Wave ID 0.
** 13) verify all modules are present in the Z-Wave Health screen. If not, launch a synchronization.


=== Replacement of a faulty module
How to re-include a faulty module without losing your scenarios, widgets and its values history

If the module is presumed "Dead" :

** Note (print screen) its parameters values, as they will be lost after exclusion.
** Go to Actions tab of the module and launch the "Replace faulty mode" command.
** The controller is in inclusion mode, proceed with the module's inclusion.
** Reset your specific parameters.

If a module is not presumed *Dead* but is still accessible :

** In the Z-Wave configuration unset the option "Automatically delete excluded devices".
** Note (print screen) its parameters values, as they will be lost after exclusion.
** Exclude the faulty module.
** Go to the faulty module's screen.
** Open the Z-Wave plugin screen in a new tab.
** Include the module.
** Copy the ID of the new module, then delete this device.
** Go back to the tab of the current module and replace its ID with the new one.
** Reset your specific parameters.


=== Ghost nodes removal
If you lost communication with a battery-powered module and you wish to exclude it form the network, it is possible the exclusion does not correctly complete and the module is not removed from the network.

A ghost module automatic wizard is available.

** Go to the screen of the module to remove.
** It will probably display a *CacheLoad* status.
Launch the *Remove ghost node* command.
** The Z-Wave network stops. The wizard updates the *zwcfg* file to remove the WakeUp CC of the module. The network restarts.
** Close the module's screen.
** Open the Z-Wave Health screen.
** Wait for the network startup to complete (topology loaded).
** The module should be marked as presumed Dead.
** Then within a minute you should see the node disappear from the Health screen.
** IF in the configuration you have unset the option "Automatically remove the excluded devices", you will have to manually delete the device.

This wizard is only available for battery-powered modules.



=== Post-inclusion actions

It is recommended to include a module at a distance of less than 1 meter form the primary controller ; this in general will not be the module's final location.
The following a a few good practices following the inclusion of a new module in the network.

Once the inclusion is done, you have to apply some parameters to your new module so as it's optimally configured. As mentioned, included modules are set with default parameters.
** While still close to the primary controller, update the module's parameters. Wake up the module to see the immediate effect of the change.
** Some module have a specific Jeedom documentation to assist you with the different parameters and their recommended values.

Test your module, validate it's communicating with the primary controller, and for actuators that the commands work and result in feedback.

While its interview is being performed, your new module has looked for its neighbors. However the current modules don't know the new one yet.

Move your module to its final location. Launch the update of its neighbors and wake it up again.

image:../images/troubleshooting07.png[]

One notices that although he sees his neighbors, they don't see it.

To remedy this situation you have to launch the heal the network action, to request all nodes find out about their neighbors.

This can take 24 hours - or more, as the battery-powered modules will only comply at their next wake-up.

image:../images/troubleshooting08.png[]

The option to heal the network twice per week allows to do this automatically and is useful if you install new modules or move existing ones.


=== No battery information returned

The Z-Wave modules only rarely send their battery status.
Some will typically send it at inclusion and when it reaches 20%, or some other critical value.

To help you follow the levels of the batteries, the Batteries screen of the Analysis menu give you an overall view of the battery levels.
A notification mechanism to alert when battery levels are low is also available.

The levels displayed are the latest values in the cache.

Every night the Z-Wave plugin requests to each module to update its battery level. At next wake-up, the module will update its battery level.
In general, it might take at least 24 hours to obtain the levels in the Batteries screen.

[TIP]
It is obviously possible to manually request an update of the battery level from the Values tab of the module, and either wait for the module's next wake up or manually wake it up to obtain immediate information.
The wake-up cycle (Wake-up Interval) of the module is defined in the System tab of the module. To optimize battery life it is recommended to set the interval as large as possible. For 4 hours, apply 14400, for 12 apply 43200.
Some modules such as thermostats have to periodically listen to the controller's messages, in this case you can apply for 15 min 900. Each kind of module is different and there is no general rule. So set this interval based on the specificity of the module and your experience.

[TIP]
The discharge of a battery is not linear ; some modules will report a big level decrease early in the initial days of service, and then that level will almost not change during weeks, and then decrease again rapidly when it reached 20%.


=== Controller in use

When the Z-Wave network starts and you immediately try to include or exclude a module you will get the following message : 
* "The controller is initializing, please try again in a few minutes".

[TIP]
When the deamon has started, the controller interviews all the modules. This is normal behavior in OpenZWave.

But if this message is still displayed after more than 10 minutes or so, this is no longer normal.

You have to then try the following steps :

* Check that the Jeedom health screen items are in green status.
* Check that the plugin configuration is correct.
* Check that you have correctly selected the Z-Wave dongle port.
* Check that the Jeedom network configuration is correct (pay attention to the fact that if you restored a DIY backup to an official installation, the /jeedom suffix should not appear).
* Check the plugin log for any error that might be reported.
* Check the *Console* of the Z-wave plugin, to see if any error was reported.
* Launch the daemon in *Debug* mode and check the *Console* and the logs of the plugin.
* Restart the whole Jeedom system.
* Make sure you have as expected a Z-Wave controller , raZberry controllers can easily be confused with EnOcean ones.

* Then proceed to hardware testing :

* The raZberry is correctly connected to the GPIO port.
* USB power is sufficient.

If you still have a problem, you have to reset the controller.

* Stop the Jeedom system from the Stop item in the user profile menu.
* Unplug the power adapter.
* Remove the USB dongle or the raZberry and wait 5 minutes.
* Re-connect everything and try again.

=== The controller no longer communicates

No command is sent to the modules although information is received by controller.

IT is possible that the outgoing message queue on the controller is full.
Check the Z-Wave network screen to see if the number of waiting messages keeps increasing.

If so, you have to restart the Z-Wave daemon.

If this keeps happening, you have to reset the controller.

* Stop the Jeedom system from the Stop item in the user profile menu.
* Unplug the power adapter.
* Remove the USB dongle or the raZberry and wait 5 minutes.
* Re-connect everything and try again.


=== Errors during dependencies

Different types of errors can occur when updating dependencies.
You have to check the dependencies update log to determine what errors occurred.
In general, you will find the error at the end of the log in the few last lines.

Here is a list of some errors and their possible remediations :

* Could not install Mercurial - abort

The Mercurial package does not install ; to fix this issue the following ssh commands :

 sudo rm /var/lib/dpkg/info/$mercurial* -f
 sudo apt-get install mercurial

* Dependencies seem not to progress beyond 75%

At 75% the OpenZWave library compiles and so does its Python wrapper.
This might take a very long time, although it is possible to see progress in the update log.
Be patient.


* Error during compilation of the OpenZWave library

 arm-linux-gnueabihf-gcc: internal compiler error: Killed (program cc1plus)
 Please submit a full bug report,
 with preprocessed source if appropriate.
 See <file:///usr/share/doc/gcc-4.9/README.Bugs> for instructions.
 error: command 'arm-linux-gnueabihf-gcc' failed with exit status 4
 Makefile:266: recipe for target 'build' failed
 make: *** [build] Error 1

This can happen due to a lack of RAM memory while compiling.

From the Jeedom interface, start the dependencies compilation.

Once started, in ssh stop the following processes that are heavy in memory usage :

 sudo systemctl stop cron
 sudo systemctl stop apache2
 sudo systemctl stop mysql

To measure progress of the compilation do a tail on the log file openzwave_update.

 tail -f /var/www/html/log/openzwave_update

When compilation completes with no errors, restart the services you stopped before

sudo systemctl start cron
sudo systemctl start apache2
sudo systemctl start mysql

[TIP]
If you still use nginx replace *apache2* by *nginx* in the *start* / *stop* commands.
You will find the openzwave_update log in the directory /usr/share/nginx/www/jeedom/log.


=== Use of the raZberry card on an RPI3

In that configuration, the internal Bluetooth controller of the RPI3 has to be deactivated.


add this line :

 dtoverlay=pi3-miniuart-bt

at the end of the file :

 /boot/config.txt

and restart the RPI3